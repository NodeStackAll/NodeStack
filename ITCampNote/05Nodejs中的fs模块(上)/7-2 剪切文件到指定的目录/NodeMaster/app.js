/*   05 Nodejs中的fs模块(上)        1. fs.stat              检测是文件还目录        2. fs.mkdir             创建目录        3. fs.writeFile         创建写入文件        4. fs.appendFile        追加文件        5. fs.readFile          读取文件        6. fs.readdir           读取目录        7. fs.rename            重命名        8. fs.rmdir             删除目录        9. fs.unlink            删除文件*/let fs = require('fs');// 1. fs.stat              检测是文件还目录    // 判断文件目录    /*fs.stat('html', function(err, stats){        if(err){            console.log(err);            return false;        }        console.log("文件",stats.isFile());        console.log('文件目录', stats.isDirectory());    });*/    // 判断文件 检测文件及目录    /*fs.stat("index.txt",(err, stats) => {        if(err){            console.log(err);            return false;        }        const flaga = stats.isFile();        const flagb = stats.isDirectory();        console.log("文件", flaga);            // 文件 true        console.log("文件目录", flagb);         // 文件目录 false    });*/// 2. fs.mkdir             创建目录    /**     *  接收参数     *      path        将创建的目录路径     *      mode        目录权限(读取权限)，默认077     *      callback    回调，传递异常参数 err     */    // 创建文件目录     /*fs.mkdir('css', function(err){         if(err){             console.log("创建失败",err);         }         console.log("创建目录成功",err);     });*///3. fs.writeFile     创建写入文件    /**     *  filename    (String)            文件名称     *  data        (String | Buffer)   将要写放的内容，可以使字符串 或 buffer 数据     *  options     (Object)            option数组对象，包含如下：     *       encoding   (string)        可选值，默认 'utf8', 当 data使buffer时，该值应该为 ignored.     *       mode       (Number)        文件读写权限，默认值 438     *       flag       (String)        默认值 'w'     *       callback   (Function)      回调，传递一个异常参数err.     *     *     */    /*fs.writeFile('t.txt', '你好NodeJS 22 123覆盖', 'utf8', function(err){        if(err){            console.log('创建失败',err);            return false;        }        console.log('写入成功！@');  //写入成功！@    });*/// 4. fs.appendFile        追加文件    /*fs.appendFile('t1.txt', '这是写入的内容', function(err){        if(err){            console.log('创建失败',err);            return false;        }        console.log('写入成功！@');  //写入成功！@    });*/    // 有就追加，没有就创建，可用来写日志    /*fs.appendFile('t1.txt', '这是写入的内容\n', function(err){        if(err){            console.log('创建失败',err);            return false;        }        console.log('写入成功！@');  //写入成功！@    });*/// 5. fs.readFile          读取文件    // 读取 index.txt文件    /*fs.readFile('t1.txt', function(err, date){        if(err){            console.log('读取失败');            return false;        }        console.log('读取成功', date); // 读取成功 <Buffer 69 6e 64 65 78 2e 74 78 74>        // 转换类型,并且拿到内容        const str = date.toString(); //  index.txt        console.log(str);        / 输出的结果如下：            这是写入的内容这是写入的内            容这是写入的内容        /    });*/// 6. fs.readdir           读取目录， 把目录下在面的文件和文件夹都获取到    /*fs.readdir('html', function(err, data){        if(err){            console.log('失败',err);            return false;        }        console.log('成功', data) // 成功 [ 'css', 'index.html', 'js' ]    });*/    // 拿到一个文件夹下面的所有目录// 7. fs.rename            重命名    /**     *   它有两个功能     *      1. 改名     *      2. 剪切文件     */    // 把 NodeMaster\html\ 目录下面的  index.html 重命名    // 1. 改名    /*fs.rename('html/index.html', 'html/new.html', function(err){        if(err){            console.log('失败',err);            return false;        }        console.log('修改名字成功') // 修改名字成功    });*/    // 2. 剪切文件到指定的目录    /*fs.rename('html/style.css', 'html/css/basic.css', function(err){        if(err){            console.log('失败',err);            return false;        }        console.log('剪切文件到指定的目录成功') // 修改名字成功    });*/    // 3. 剪切文件到指定的目录    fs.rename('html/css/basic.css', 'html/style.css', function(err){        if(err){            console.log('失败',err);            return false;        }        console.log('剪切成功') // 修改名字成功    });